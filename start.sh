#!/bin/bash

echo "üöÄ Iniciando Sistema de Analytics con Hadoop & Spark"
echo "=================================================="

# Crear directorios necesarios
mkdir -p data templates static src

# Copiar archivos de utilidades a src si no existen
if [ ! -f "src/__init__.py" ]; then
    echo "üìÅ Creando estructura de m√≥dulos..."
    # Los archivos ya est√°n creados como artefactos
fi

# Verificar si Docker est√° corriendo
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Error: Docker no est√° corriendo"
    echo "Por favor inicia Docker Desktop y vuelve a ejecutar este script"
    exit 1
fi

# Verificar si docker-compose est√° disponible
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Error: docker-compose no est√° instalado"
    echo "Por favor instala docker-compose y vuelve a ejecutar este script"
    exit 1
fi

echo "‚úÖ Docker verificado correctamente"

# Generar datos de prueba si no existen
if [ ! -f "data/sample_data.csv" ]; then
    echo "üìä Generando datos de prueba..."
    python3 generate_sample_data.py --rows 50000 --filename data/sample_data.csv
    echo "‚úÖ Datos de prueba generados"
else
    echo "‚úÖ Datos de prueba ya existen"
fi

# Construir e iniciar contenedores
echo "üî® Construyendo contenedores..."
docker-compose build

echo "üöÄ Iniciando servicios..."
docker-compose up -d

# Esperar a que los servicios est√©n listos
echo "‚è≥ Esperando a que los servicios est√©n listos..."

# Funci√≥n para verificar si un servicio est√° listo
check_service() {
    local service_name=$1
    local url=$2
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s -f $url > /dev/null 2>&1; then
            echo "‚úÖ $service_name est√° listo"
            return 0
        fi
        echo "‚è≥ Esperando $service_name (intento $attempt/$max_attempts)..."
        sleep 5
        attempt=$((attempt + 1))
    done
    
    echo "‚ùå $service_name no respondi√≥ despu√©s de $max_attempts intentos"
    return 1
}

# Verificar servicios
echo "üîç Verificando servicios..."

check_service "Hadoop NameNode" "http://localhost:9870"
check_service "Spark Master" "http://localhost:8080"
check_service "Flask API" "http://localhost:5000/api/health"

echo ""
echo "üéâ SISTEMA INICIADO CORRECTAMENTE"
echo "=================================="
echo ""
echo "üì± Servicios disponibles:"
echo "‚Ä¢ Dashboard Principal: http://localhost:5000"
echo "‚Ä¢ Hadoop NameNode UI: http://localhost:9870"
echo "‚Ä¢ Spark Master UI: http://localhost:8080"
echo "‚Ä¢ Spark Worker UI: http://localhost:8081"
echo ""
echo "üß™ Para probar el sistema:"
echo "1. Ve a http://localhost:5000"
echo "2. Sube el archivo 'data/sample_data.csv'"
echo "3. Ejecuta consultas SQL como:"
echo "   SELECT category, COUNT(*) as total FROM data GROUP BY category"
echo ""
echo "üìä Datos de prueba:"
echo "‚Ä¢ Archivo: data/sample_data.csv"
echo "‚Ä¢ Registros: $(wc -l < data/sample_data.csv 2>/dev/null || echo 'N/A')"
echo ""
echo "üõ†Ô∏è Comandos √∫tiles:"
echo "‚Ä¢ Ver logs: docker-compose logs -f [servicio]"
echo "‚Ä¢ Detener: docker-compose down"
echo "‚Ä¢ Reiniciar: docker-compose restart [servicio]"
echo ""

# Mostrar estado de contenedores
echo "üìã Estado de contenedores:"
docker-compose ps

echo ""
echo "‚ú® ¬°Sistema listo para usar!"